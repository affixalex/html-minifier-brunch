// Generated by CoffeeScript 1.6.3
(function() {
  var HTMLMinifier, fs, fspath, jade, minify, mkdirp, progeny, _;

  fs = require("fs");
  fspath = require("path");
  _ = require("lodash");
  mkdirp = require("mkdirp");
  minify = require("html-minifier").minify;

  module.exports = HTMLMinifier = (function() {
    HTMLMinifier.prototype.brunchPlugin = true;
    HTMLMinifier.prototype.type = "template";
    HTMLMinifier.prototype.extension = "html";

    HTMLMinifier.prototype.DEFAULT_DESTINATION_FN = function(path) {
      return path.replace(/^app[\/\\](.*)\.html$/, "$1.html");
    };

    HTMLMinifier.prototype.DEFAULT_HTMLMIN_OPTIONS = {
      collapseWhitespace: true,
      removeComments: true,
      removeCommentsFromCDATA: true,
      removeCDATASectionsFromCDATA: true,
      collapseBooleanAttributes: true,
      useShortDoctype: true,
      removeEmptyAttributes: true,
      removeScriptTypeAttributes: true,
      removeStyleLinkTypeAttributes: true
    };

    function HTMLMinifier(config) {
      var filter, fn, htmlminConfig, jadeConfig, optimize, pluginConfig, _ref, _ref1, _ref2;
      pluginConfig = (_ref = config.plugins) != null ? _ref.jadePages : void 0;
      this.pattern = pluginConfig != null ? pluginConfig.pattern : void 0;
      this.publicPath = fspath.resolve(config.paths["public"]);
      
      this.destinationFn = (
        _ref1 = pluginConfig != null ? pluginConfig.destination : void 0
      ) != null ? _ref1 : this.DEFAULT_DESTINATION_FN;    
      
      htmlminConfig = pluginConfig != null ? pluginConfig.htmlmin : void 0;
      if (_.isBoolean(htmlminConfig)) {
        this.htmlmin = htmlminConfig;
        this.htmlminOptions = _.extend({}, this.DEFAULT_HTMLMIN_OPTIONS);
      } else if (_.isObject(htmlminConfig)) {
        this.htmlminOptions = _.extend({}, htmlminConfig);
      }
    }

    HTMLMinifier.prototype.compile = function(data, path, callback) {
      var destinationDir, destinationPath, err, error, result;
      try {
        result = minify(data, this.htmlminOptions);
        destinationPath = this.destinationFn(path);
        destinationPath = fspath.join(this.publicPath, destinationPath);
        destinationDir = fspath.dirname(destinationPath);
        mkdirp.sync(destinationDir);
        return fs.writeFileSync(destinationPath, result);
      } catch (_error) {
        err = _error;
        console.error("Error while processing '" + path + "': " + (err.toString()));
        return error = err;
      } finally {
        callback(error, "");
      }
    };

    return HTMLMinifier;

  })();

}).call(this);
